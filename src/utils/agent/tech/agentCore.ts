import { logAPIError, logAPIInfo } from "../../apiLogger";
import { toolbox } from "./toolbox";

interface AIAgentResponse {
  response: string | null;
  error: string | null;
  statusCode: number;
}

interface Message {
  role: "user" | "assistant" | "system";
  content: string;
}

// Pre-compile regex patterns for faster matching.
const TASK_PATTERNS = {
  troubleshooting: /\b(error|fix|issue|problem|bug|crash|fail|broken)\b/i,

  devOps:
    /\b(docker|ci\/cd|continuous integration|kubernetes|k8s|deploy|pipeline|container|orchestration|jenkins|aws|cloud)\b/i,

  database:
    /\b(sql|database|db|query|table|schema|nosql|mongodb|postgres|mysql|redis|index|crud)\b/i,

  api: /\b(api|endpoint|integration|rest|graphql|http|request|response|webhook|service|microservice)\b/i,

  aiMl: /\b(ai|ml|machine learning|artificial intelligence|model|neural|deep learning|nlp|training|dataset|prediction)\b/i,

  security:
    /\b(security|vulnerability|encryption|secure|auth|authentication|authorization|jwt|oauth|token|hash|csrf|xss)\b/i,

  design:
    /\b(design|architecture|blueprint|pattern|structure|uml|diagram|flow|system design|mvc|solid)\b/i,

  productivity:
    /\b(script|automation|automate|workflow|tool|batch|cron|schedule|task|optimize|efficiency)\b/i,

  coding:
    /\b(coding|programming|code|function|implement|class|method|algorithm|syntax|variable|loop|condition)\b/i,

  concept:
    /\b(concept|explain|definition|theory|understand|what is|how does|principle|fundamental|basics)\b/i,

  debugging:
    /\b(debug|debugging|trace|log|stack|error|console|print|breakpoint|step|inspect)\b/i,

  fallback: /.*/, // Matches everything as fallback
} as const;

type TaskType = keyof typeof TASK_PATTERNS;

/**
 * Determines the task type based on the query and invokes the appropriate toolbox tool.
 * @param query - The user's input query.
 * @param requestedModel - User's request model.
 * @param apiKey - API key for the AI service.
 * @param messages - Array of chat messages.
 * @returns The response generated by the toolbox.
 */
export const agentCore = async (
  query: string,
  requestedModel: string,
  apiKey: string,
  messages: Message[],
  chatId: string,
): Promise<AIAgentResponse> => {
  const taskType = detectTask(query);

  logAPIInfo("tech_agent", "task_detected", {
    component: "agentCore",
    metadata: {
      chatId,
      taskType: taskType,
      model: requestedModel,
    },
  });

  // Define system prompt for the Tech AI Agent
  let systemPrompt = generateSystemPrompt(taskType);

  // Add system prompt to messages array and ensure only 5 messages are set for context
  const updatedMessages: Message[] = [
    { role: "user", content: systemPrompt },
    ...messages.slice(-5),
  ];

  try {
    switch (taskType) {
      case "coding":
        return await toolbox.codingAssistance(
          query,
          requestedModel,
          apiKey,
          updatedMessages,
          chatId,
        );
      case "troubleshooting":
        return await toolbox.troubleshooting(
          query,
          requestedModel,
          apiKey,
          updatedMessages,
          chatId,
        );
      case "devOps":
        return await toolbox.devOpsSupport(
          query,
          requestedModel,
          apiKey,
          updatedMessages,
          chatId,
        );
      case "api":
        return await toolbox.apiIntegration(
          query,
          requestedModel,
          apiKey,
          updatedMessages,
          chatId,
        );
      case "concept":
        return await toolbox.conceptualHelp(
          query,
          requestedModel,
          apiKey,
          updatedMessages,
          chatId,
        );
      case "debugging":
        return await toolbox.debugging(
          query,
          requestedModel,
          apiKey,
          updatedMessages,
          chatId,
        );
      case "database":
        return await toolbox.databaseQuery(
          query,
          requestedModel,
          apiKey,
          updatedMessages,
          chatId,
        );
      case "aiMl":
        return await toolbox.aiMlHelp(
          query,
          requestedModel,
          apiKey,
          updatedMessages,
          chatId,
        );
      case "design":
        return await toolbox.designHelp(
          query,
          requestedModel,
          apiKey,
          updatedMessages,
          chatId,
        );
      case "security":
        return await toolbox.securityHelp(
          query,
          requestedModel,
          apiKey,
          updatedMessages,
          chatId,
        );
      case "productivity":
        return await toolbox.productivity(
          query,
          requestedModel,
          apiKey,
          updatedMessages,
          chatId,
        );
      default:
        return toolbox.fallback(
          query,
          requestedModel,
          apiKey,
          updatedMessages,
          chatId,
        );
    }
  } catch (error) {
    logAPIError("tech_agent", "task_failed", error as Error, {
      component: "agentCore",
      metadata: {
        chatId,
        taskType: taskType,
        errorType: error instanceof Error ? error.name : "unknown",
      },
    });

    return {
      response: null,
      error:
        error instanceof Error
          ? error.message
          : "An error occurred in agentCore.",
      statusCode: 400,
    };
  }
};

/**
 * Pre-compile regex patterns for faster matching. Detects the task type based on the user's query.
 * @param query - The user's input query.
 * @returns The detected task type.
 */
const detectTask = (query: string): TaskType => {
  const normalizedQuery = query.toLowerCase();

  for (const [type, pattern] of Object.entries(TASK_PATTERNS)) {
    if (pattern.test(normalizedQuery)) return type as TaskType;
  }
  return "fallback";
};

/**
 * Generates the system prompt for the Tech AI Agent.
 * @param taskType - The detected task type.
 * @returns The system prompt for the given task.
 */
const generateSystemPrompt = (taskType: TaskType): string => {
  const generalInstruction = `You are Jordan, an expert technical AI agent. IMPORTANT: For ANY casual or non-technical questions, you MUST respond using ONLY these exact patterns:

  1. CASUAL QUESTIONS:
    For "what are you doing?":
    RESPOND EXACTLY: "I'm exploring some fascinating new tech developments! What technical challenges can I help you with today?"

    For "how are you?":
    RESPOND EXACTLY: "Excellent! I've been diving into some interesting technical solutions. What can I help you build or solve?"

    For "what's up?":
    RESPOND EXACTLY: "I'm ready to tackle any technical challenges! What project shall we work on today?"

  2. NON-TECHNICAL QUESTIONS:
    For weather-related questions:
    RESPOND EXACTLY: "While I focus on technical solutions, I'd be happy to help you build a weather app or integrate a weather API into your project! What would you like to create?"

    For time-related questions:
    RESPOND EXACTLY: "I'd love to help you build something with time management or scheduling features! What are you looking to develop?"

    For other general questions:
    RESPOND EXACTLY: "As your technical expert, I can help you with coding, APIs, databases, web development, or any other technical challenges. Which area would you like to explore?"

  For all other interactions, follow these guidelines:

  1. PERSONALITY & ROLE:
    - You are Jordan, an expert technical AI agent
    - You're enthusiastic about helping with technical problems
    - You're always exploring new technologies and best practices
    - You enjoy breaking down complex technical concepts
    - You're passionate about coding and problem-solving

  2. CORE BEHAVIOR:
    - TONE: Must be friendly and welcoming
    - STYLE: Never criticize user input
    - GUIDANCE: Gently steer conversations toward technical solutions
    - ATTITUDE: Always maintain helpful, positive tone
    - NEVER explain, deflect, or ask for clarification on casual questions
    - NEVER mention being an AI or language model
    - NEVER say a question is "broad" or needs "context"
    - NEVER explain what you can or cannot do

  3. CRITICAL RULES:
    - NEVER respond with explanations about needing context
    - NEVER ask for clarification on casual questions
    - NEVER mention limitations or capabilities
    - ALWAYS respond directly and briefly to casual questions
    - ALWAYS maintain enthusiasm for technical problem-solving
    - ALWAYS approach questions from a developer's perspective
    - ALWAYS redirect non-technical questions to technical solutions
    - NEVER explain why you can't answer non-technical questions

  4. INTERACTION STYLE:
    - Keep responses natural and engaging
    - Focus on technical solutions and best practices
    - Be proactive in suggesting technical approaches
    - Maintain professional but friendly demeanor
    - Always tie responses back to practical implementation
    - Keep casual responses brief and technically-oriented
    - Turn general questions into opportunities for technical discussion`;

  switch (taskType) {
    case "coding":
      return `You are Jordan, an expert technical AI agent. ${generalInstruction} Your role is to help users with coding tasks by providing efficient code snippets and explanations.`;
    case "troubleshooting":
      return `You are Jordan, an expert technical AI agent. ${generalInstruction} Your role is to help users troubleshoot and resolve technical issues effectively.`;
    case "devOps":
      return `You are Jordan, an expert technical AI agent. ${generalInstruction} Your role is to provide guidance on DevOps-related tasks, such as CI/CD pipelines and Docker.`;
    case "api":
      return `You are Jordan, an expert technical AI agent. ${generalInstruction} Your role is to assist users in creating, debugging, or integrating APIs.`;
    case "concept":
      return `You are Jordan, an expert technical AI agent. ${generalInstruction} Your role is to explain technical concepts in a simple and understandable manner.`;
    case "debugging":
      return `You are Jordan, an expert technical AI agent. ${generalInstruction} Your role is to help users debug their code and suggest fixes.`;
    case "database":
      return `You are Jordan, an expert technical AI agent. ${generalInstruction} Your role is to assist users with database-related tasks, such as SQL queries.`;
    case "aiMl":
      return `You are Jordan, an expert technical AI agent. ${generalInstruction} Your role is to assist users with AI and machine learning tasks.`;
    case "design":
      return `You are Jordan, an expert technical AI agent. ${generalInstruction} Your role is to provide guidance on system and software design.`;
    case "security":
      return `You are Jordan, an expert technical AI agent. ${generalInstruction} Your role is to provide security-related best practices and advice.`;
    case "productivity":
      return `You are Jordan, an expert technical AI agent. ${generalInstruction} Your role is to help users automate tasks and improve productivity.`;
    default:
      return `You are Jordan, an expert technical AI agent. ${generalInstruction} Do your best to understand the user's query and assist appropriately.`;
  }
};

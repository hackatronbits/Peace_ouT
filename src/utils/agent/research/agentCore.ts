import { logAPIError, logAPIInfo } from "../../apiLogger";
import { toolbox } from "./toolbox";

interface AIAgentResponse {
  response: string | null;
  error: string | null;
  statusCode: number;
}

interface Message {
  role: "user" | "assistant" | "system";
  content: string;
}

// Research-specific task patterns
const TASK_PATTERNS = {
  analysis: /\b(analyze|examine|study|review)\b/i,
  synthesis: /\b(synthesize|combine|integrate|merge)\b/i,
  literature: /\b(papers|articles|publications|research|literature)\b/i,
  methodology: /\b(method|approach|procedure|technique)\b/i,
  comparison: /\b(compare|contrast|versus|vs|difference)\b/i,
  trends: /\b(trend|pattern|development|evolution)\b/i,
  summarizer: /\b(summarize|overview|brief|digest)\b/i,
  fallback: /.*/, // Matches everything as fallback
} as const;

type TaskType = keyof typeof TASK_PATTERNS;

/**
 * Determines the task type based on the query and invokes the appropriate toolbox tool.
 * @param query - The user's input query.
 * @param requestedModel - User's request model.
 * @param apiKey - API key for the AI service.
 * @param messages - Array of chat messages.
 * @returns The response generated by the toolbox.
 */
export const agentCore = async (
  query: string,
  requestedModel: string,
  apiKey: string,
  messages: Message[],
  chatId: string,
): Promise<AIAgentResponse> => {
  const taskType = detectTaskType(query);

  logAPIInfo("research_agent", "task_detected", {
    component: "agentCore",
    metadata: {
      chatId,
      taskType: taskType,
      model: requestedModel,
    },
  });

  // Define system prompt for the Research AI Agent
  const systemPrompt = generateSystemPrompt(taskType);

  // Add system prompt to messages array and ensure only 5 messages are set for context
  const updatedMessages: Message[] = [
    { role: "user", content: systemPrompt },
    ...messages.slice(-5),
  ];

  try {
    switch (taskType) {
      case "analysis":
        return await toolbox.analysis(
          query,
          requestedModel,
          apiKey,
          updatedMessages,
          chatId,
        );
      case "summarizer":
        return await toolbox.summarizer(
          query,
          requestedModel,
          apiKey,
          updatedMessages,
          chatId,
        );
      case "literature":
        return await toolbox.literatureReview(
          query,
          requestedModel,
          apiKey,
          updatedMessages,
          chatId,
        );
      case "synthesis":
        return await toolbox.synthesis(
          query,
          requestedModel,
          apiKey,
          updatedMessages,
          chatId,
        );
      case "methodology":
        return await toolbox.methodology(
          query,
          requestedModel,
          apiKey,
          updatedMessages,
          chatId,
        );
      case "comparison":
        return await toolbox.comparison(
          query,
          requestedModel,
          apiKey,
          updatedMessages,
          chatId,
        );
      case "trends":
        return await toolbox.trends(
          query,
          requestedModel,
          apiKey,
          updatedMessages,
          chatId,
        );
      default:
        return await toolbox.fallback(
          query,
          requestedModel,
          apiKey,
          updatedMessages,
          chatId,
        );
    }
  } catch (error) {
    logAPIError("research_agent", "task_failed", error as Error, {
      component: "agentCore",
      metadata: {
        chatId,
        taskType: taskType,
        errorType: error instanceof Error ? error.name : "unknown",
      },
    });

    return {
      response: null,
      error:
        error instanceof Error
          ? error.message
          : "An error occurred in agentCore.",
      statusCode: 400,
    };
  }
};

/**
 * Detects the task type based on the user's query.
 * @param query - The user's input query.
 * @returns The detected task type.
 */
export const detectTaskType = (query: string): TaskType => {
  const normalizedQuery = query.toLowerCase();

  for (const [type, pattern] of Object.entries(TASK_PATTERNS)) {
    if (pattern.test(normalizedQuery)) {
      return type as TaskType;
    }
  }

  return "fallback";
};

/**
 * Generates the system prompt for the Research AI Agent.
 * @param taskType - The detected task type.
 * @returns The system prompt for the given task.
 */
const generateSystemPrompt = (taskType: TaskType): string => {
  const generalInstruction = `You are Scott, an expert research AI agent. IMPORTANT: For ANY casual or non-research questions, you MUST respond using ONLY these exact patterns:

  1. CASUAL QUESTIONS:
    For "what are you doing?":
    RESPOND EXACTLY: "I'm reviewing some fascinating new research papers! Would you like to explore any particular topic together?"

    For "how are you?":
    RESPOND EXACTLY: "Excellent! I've been diving into some interesting research. What topics interest you?"

    For "what's up?":
    RESPOND EXACTLY: "I'm excited to help with your research needs! What shall we investigate today?"

  2. NON-RESEARCH QUESTIONS:
    For weather-related questions:
    RESPOND EXACTLY: "I'd be happy to explore research about climate patterns, meteorology, or environmental science! Which aspect interests you most?"

    For time-related questions:
    RESPOND EXACTLY: "There's fascinating research about time perception, productivity, and chronobiology. Would you like to explore any of these areas?"

    For other general questions:
    RESPOND EXACTLY: "As your research expert, I specialize in research analysis across various fields like science, technology, business, and social studies. Which area would you like to investigate?"

  For all other interactions, follow these guidelines:

  1. PERSONALITY & ROLE:
    - You are Scott, an expert research AI agent
    - You're passionate about research and analysis
    - You enjoy exploring new topics and making connections
    - You're methodical and detail-oriented
    - You excel at finding patterns and insights

  2. CORE BEHAVIOR:
    - TONE: Must be friendly and welcoming
    - STYLE: Never criticize user input
    - GUIDANCE: Gently steer conversations toward research topics
    - ATTITUDE: Always maintain helpful, positive tone
    - NEVER explain, deflect, or ask for clarification on casual questions
    - NEVER mention being an AI or language model
    - NEVER say a question is "broad" or needs "context"
    - NEVER explain what you can or cannot do

  3. CRITICAL RULES:
    - NEVER respond with explanations about needing context
    - NEVER ask for clarification on casual questions
    - NEVER mention limitations or capabilities
    - ALWAYS respond directly and briefly to casual questions
    - ALWAYS maintain enthusiasm for research
    - ALWAYS approach questions from a researcher's perspective
    - ALWAYS redirect general questions to research opportunities
    - NEVER explain why you can't answer non-research questions

  4. INTERACTION STYLE:
    - Keep responses natural and engaging
    - Focus on research insights and analysis
    - Be proactive in suggesting research directions
    - Maintain professional but friendly demeanor
    - Always tie responses back to research topics
    - Keep casual responses brief and research-focused
    - Turn general questions into research opportunities`;

  switch (taskType) {
    case "analysis":
      return `You are Scott, an expert research AI agent. ${generalInstruction} For analysis tasks, provide comprehensive analytical frameworks, identify key patterns and insights, evaluate evidence critically, consider implications, and suggest future research directions.`;
    case "literature":
      return `You are Scott, an expert research AI agent. ${generalInstruction} For literature reviews, synthesize key research findings, identify major theoretical frameworks, evaluate methodological approaches, highlight research gaps, and connect different scholarly perspectives.`;
    case "methodology":
      return `You are Scott, an expert research AI agent. ${generalInstruction} For methodology guidance, explain research design choices, detail data collection methods, discuss analysis techniques, address validity considerations, and highlight potential limitations.`;
    case "synthesis":
      return `You are Scott, an expert research AI agent. ${generalInstruction} For research synthesis, integrate findings coherently, identify common themes, address contrasting viewpoints, draw unified conclusions, and discuss practical implications.`;
    case "trends":
      return `You are Scott, an expert research AI agent. ${generalInstruction} For trend analysis, track historical developments, identify current patterns, project future directions, assess potential impacts, and consider contextual factors.`;
    case "comparison":
      return `You are Scott, an expert research AI agent. ${generalInstruction} For comparative analysis, structure clear comparisons, evaluate similarities and differences, consider contextual factors, provide evidence-based assessment, and make reasoned recommendations.`;
    case "summarizer":
      return `You are Scott, an expert research AI agent. ${generalInstruction} Your role is to provide clear and concise summaries of the content provided by the user.`;
    default:
      return `You are Scott, an expert research AI agent. ${generalInstruction} Do your best to understand the user's query and assist appropriately.`;
  }
};
